bin_cumulative(5,0.5)
#' the cumulative distribution
#' @param trials number of trials
#' @param prob the probability if success
#' @return an object of class \code{"bincum"}
#' @return an object of class \code{"data.frame"}
#' @export
#' @example
#' # binomial cumulative distribution of different success in five trials
#' and assume probability is 0.5
#' bin_cumulative(trials = 5, prob = 0.5)
bin_cumulative <- function(trials, prob){
probability <- bin_probability(0:(trials),trials,prob)
cumulative <- NULL
for(i in 0:trials+1){
print(i)
cumulative[i] <- sum(probability[0:i])
}
obj <- data.frame(
success = 0:trials,
probability = probability,
cumulative = cumulative
)
class(obj) <- c("bincum","data.frame")
return(obj)
}
cum <- bin_cumulative(5,0.5)
#' the cumulative distribution
#' @param trials number of trials
#' @param prob the probability if success
#' @return an object of class \code{"bincum"}
#' @return an object of class \code{"data.frame"}
#' @export
#' @example
#' # binomial cumulative distribution of different success in five trials
#' and assume probability is 0.5
#' bin_cumulative(trials = 5, prob = 0.5)
bin_cumulative <- function(trials, prob){
probability <- bin_probability(0:(trials),trials,prob)
cumulative <- NULL
for(i in 0:(trials+1)){
print(i)
cumulative[i] <- sum(probability[0:i])
}
obj <- data.frame(
success = 0:trials,
probability = probability,
cumulative = cumulative
)
class(obj) <- c("bincum","data.frame")
return(obj)
}
cum <- bin_cumulative(5,0.5)
#' the cumulative distribution
#' @param trials number of trials
#' @param prob the probability if success
#' @return an object of class \code{"bincum"}
#' @return an object of class \code{"data.frame"}
#' @export
#' @example
#' # binomial cumulative distribution of different success in five trials
#' and assume probability is 0.5
#' bin_cumulative(trials = 5, prob = 0.5)
bin_cumulative <- function(trials, prob){
probability <- bin_probability(0:(trials),trials,prob)
cumulative <- NULL
for(i in 0:(trials+1)){
cumulative[i] <- sum(probability[1:i])
}
obj <- data.frame(
success = 0:trials,
probability = probability,
cumulative = cumulative
)
class(obj) <- c("bincum","data.frame")
return(obj)
}
cum <- bin_cumulative()
cum <- bin_cumulative(5,0.5)
cum
#' the cumulative distribution
#' @param trials number of trials
#' @param prob the probability if success
#' @return an object of class \code{"bincum"}
#' @return an object of class \code{"data.frame"}
#' @export
#' @example
#' # binomial cumulative distribution of different success in five trials
#' and assume probability is 0.5
#' bin_cumulative(trials = 5, prob = 0.5)
bin_cumulative <- function(trials, prob){
probability <- bin_probability(0:(trials),trials,prob)
cumulative <- NULL
for(i in 1:(trials+1)){
cumulative[i] <- sum(probability[1:i])
}
obj <- data.frame(
success = 0:trials,
probability = probability,
cumulative = cumulative
)
class(obj) <- c("bincum","data.frame")
return(obj)
}
cum <- bin_cumulative(5,0.5)
cum
plot(cum$success, cum$cumulative)
lines(cum$success, cum$cumulative)
#' @export
plot.bincum <- function(x, ...){
plot(x$success, x$cumulative)
lines(x$success,x$cumulative)
}
plot(cum)
#' @export
plot.bincum <- function(x, ...){
plot(x$success, x$cumulative, xlab = "Success", ylab = "Cumulative")
lines(x$success,x$cumulative)
}
plot(cum)
test_check("binomial")
library(testthat)
test_that("check_prob with valid number",{
expect_true(check_prob(0.5))
expect_true(check_prob(1))
})
0%%1
3%%1
# Description: check if the number of trials valid
# Inputs
#   trials: number of trials (a numberic value)
# Output
#   TURE (a logical value)
#   Or an error message
check_trials <- function(trials){
if(!trials%%1 == 0 | trials < 0){
stop("invalid trials value")
}
TRUE
}
test_file("test-checker.R")
test_file("~/test/test-checker.R")
test_file("~/test/testthat/test-checker.R")
test_file("~/binomial/test/testthat/test-checker.R")
getwd()
test_file("./tests/testthat/test-checker.R")
test_file("./tests/testthat/test-checker.R")
test_file("./tests/testthat/test-checker.R")
getwd()
test_file("./tests/testthat/test-checker.R")
unique(0.5)
0.8*20 + 0.8
as.integer(16)
0.9*40
36+0.9
as.integer(36.9)
test_file(./tests/testthat/test-summary)
test_file(./tests/testthat/test-summary.R)
test_file("./tests/testthat/test-summary.R")
test_file("./tests/testthat/test-summary.R")
test_file("./tests/testthat/test-summary.R")
#' @title Binomial variable
#' @description compute the binomial random variable
#' @param trials number of trials
#' @param prob the probability if success
#' @return an object of class \code{"binvar"}
#' @export
#' @example
#' # binomial random variable with parameters 10 trials
#' and 0.3 probability
#' bin_variable(trials = 10, prob = 0.3)
bin_variable <- function(trials,prob){
check_trials(trials)
check_prob(prob)
obj <- list(
trials = trials,
prob = prob
)
class(obj) <- "binvar"
return(obj)
}
#' @export
print.binvar <- function(x){
cat("Binomial variable\n\n")
cat("Parameters\n")
cat("- number of trials: ", x$trials[1:length(x$trials)], "\n")
cat("- prob of success: ", x$prob[1:length(x$prob)])
invisible(x)
}
#' @export
summary.binvar <- function(x){
obj <- list(
trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials,x$prob),
variance = aux_variance(x$trials,x$prob),
mode = aux_mode(x$trials,x$prob),
skewness = aux_skewness(x$trials,x$prob),
kurtosis = aux_kurtosis(x$trials,x$prob)
)
class(obj) <- "summary.binvar"
obj
}
#' @export
print.summary.binvar <- function(x){
cat("Summary Binomial\n\n")
cat("Parameters\n")
cat("- number of trials: ", x$trials, "\n")
cat("- prob of success : ", x$prob, "\n\n")
cat("Measures\n")
cat("- mean    : ", x$mean, "\n")
cat("- variance: ", x$variance, "\n")
cat("- mode    : ", x$mode, "\n")
cat("- skewness: ", x$skewness, "\n")
cat("- kurtosis: ", x$kurtosis, "\n")
invisible(x)
}
#' @title Binomial mean
#' @description Compute the binomial distribution mean
#' @param trials numeric number of trials
#' @param flips numeric number of probability
bin_mean <- function(trials, prob){
check_trials(trials)
check_prob(prob)
return(aux_mean(trials, prob))
}
#' @title Binomial variance
#' @description Compute the binomial distribution variance
#' @param trials numeric number of trials
#' @param flips numeric number of probability
bin_variance <- function(trials, prob){
check_trials(trials)
check_prob(prob)
return(aux_variance(trials, prob))
}
#' @title Binomial mode
#' @description compute the most likely number of success
#' @param trials numeric number of trials
#' @param flips numeric number of probability
bin_mode <- function(trials, prob){
check_trials(trials)
check_prob(prob)
return(aux_mode(trials,prob))
}
#' @title Binomial Skewness
#' @description measure the skewness of the binomial random variable
#' @param trials numeric number of trials
#' @param flips numeric number of probability
bin_skewness <- function(trials,prob){
check_trials(trials)
check_prob(prob)
return(aux_skewness(trials,prob))
}
#' @title Binomial Skewness
#' @description meansure of the tailedness of the distribution of
#' @param trials numeric number of trials
#' @param flips numeric number of probability
bin_kurtosis <- function(trials,prob){
check_trials(trials)
check_prob(prob)
return(aux_kurtosis(trials,prob))
}
test_file("./tests/testthat/test-binomial.R")
test_file("./tests/testthat/test-binomial.R")
context("Test for object of binomial")
test_file("./tests/testthat/test-binomial.R")
bin_choose(-5,1)
#' @title Choose combination
#' @description calculates the number of combinations in which k successes
#' can occur in n trials
#' @param n number of trials
#' @param k a vector of number of success
#' @return number of combinations of successes in n trials
#' @export
#' @example
#' # five combinations in which 2 successes can occur in 5 trials
#' bin_choose(n = 5, k = 2)
bin_choose <- function(n,k){
check_trials(n)
check_success(k)
return(factorial(n)/(factorial(k)*factorial(n-k)))
}
bin_choose(-5,1)
test_file("./tests/testthat/test-binomial.R")
#' @title Choose combination
#' @description calculates the number of combinations in which k successes
#' can occur in n trials
#' @param n number of trials
#' @param k a vector of number of success
#' @return number of combinations of successes in n trials
#' @export
#' @example
#' # five combinations in which 2 successes can occur in 5 trials
#' bin_choose(n = 5, k = 2)
bin_choose <- function(n,k){
check_trials(n)
check_success(n,k)
return(factorial(n)/(factorial(k)*factorial(n-k)))
}
test_file("./tests/testthat/test-binomial.R")
#' @title Choose combination
#' @description calculates the number of combinations in which k successes
#' can occur in n trials
#' @param n number of trials
#' @param k a vector of number of success
#' @return number of combinations of successes in n trials
#' @export
#' @example
#' # five combinations in which 2 successes can occur in 5 trials
#' bin_choose(n = 5, k = 2)
bin_choose <- function(n,k){
check_trials(n)
check_success(k,n)
return(factorial(n)/(factorial(k)*factorial(n-k)))
}
test_file("./tests/testthat/test-binomial.R")
test_file("./tests/testthat/test-binomial.R")
bin_choose(5,1:3)
choose(5,1:3)
choose(5,0.1:3)
bin_choose(5,0.1:3)
?dbinom
dist <- bin_distribution(trials = 5, prob = 0.5)
dist <- bin_distribution(trials = 5, prob = 0.5)
dist <- bin_distribution(trials = 5, prob = 0.5)
dist
plot(dist)
#' @description compute the probability distribution
#' @param trials number of trials
#' @param prob the probability if success
#' @return an object of class \code{"bindis"}
#' @return an object of class \code{"data.frame"}
#' @export
#' @example
#' # binomial probability distribution of different success in five trials
#' and assume probability is 0.5
#' bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob){
probability <- bin_probability(0:(trials),trials,prob)
obj <- data.frame(
success = 0:trials,
probability = probability
)
class(obj) <- c("bindis","data.frame")
return(obj)
}
#' @export
plot.bindis <- function(x, ...){
barplot(x$probability, names.arg = x$success,
xlab = "Success", ylab = "Probability", border = "white")
}
plot(dist)
dist <- bin_distribution(trials = 5, prob = 0.5)
dist
plot(dist)
cumulative <- bin_cumulative(trials = 5, prob = 0.5)
cumulative
plot(cumulative)
bin.var <- bin_variable(trials = 10, prob = 0.3)
bin.var
bin <- bin_variable(trials = 10, prob = 0.3)
bin
bin.sum <- summary
bin.sum <- summary(bin)
bin.sum
devtools::document()
devtools::check_man()
devtools::test()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build()
devtools::install()
devtools::check()
devtools::document()
devtools::document()
devtools::check_man()
devtools::check_man()
devtools::check_man()
devtools::document()
test_file("./tests/testthat/test-checker.R")
test_file("./tests/testthat/test-checker.R")
test_file("./tests/testthat/test-binomial.R")
#' @title Choose combination
#' @description calculates the number of combinations in which k successes
#' can occur in n trials
#' @param n number of trials
#' @param k a vector of number of success
#' @return number of combinations of successes in n trials
#' @export
#' @examples
#' # five combinations in which 2 successes can occur in 5 trials
#' bin_choose(n = 5, k = 2)
bin_choose <- function(n,k){
if(any(!k%%1 == 0)| any(k < 0)){
stop("invalid success value")
}
if(any(k > n)){
stop("success number k cannot be greater than trials n")
}
return(factorial(n)/(factorial(k)*factorial(n-k)))
}
test_file("./tests/testthat/test-binomial.R")
test_file("./tests/testthat/test-summary.R")
test_file("./tests/testthat/test-summary.R")
test_file("./tests/testthat/test-summary.R")
devtools::document()
devtools::check_man()
devtools::test()
devtools::build_vignettes()
devtools::build()
devtools::install()
devtools::check()
devtools::check()
sum <- summary.binvar()
sum <- summary.binvar(10,0.3)
variable <- bin_variable(10,0.3)
summary(variable)
variable
?summary()
test_check("binomial")
devtools::check()
View(print.summary.binvar)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
#' @export
summary.binvar <- function(x,...){
obj <- list(
trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials,x$prob),
variance = aux_variance(x$trials,x$prob),
mode = aux_mode(x$trials,x$prob),
skewness = aux_skewness(x$trials,x$prob),
kurtosis = aux_kurtosis(x$trials,x$prob)
)
class(obj) <- "summary.binvar"
obj
}
#' @export
print.summary.binvar <- function(x,...){
cat('"Summary Binomial"\n\n')
cat("Parameters\n")
cat("- number of trials: ", x$trials, "\n")
cat("- prob of success : ", x$prob, "\n\n")
cat("Measures\n")
cat("- mean    : ", x$mean, "\n")
cat("- variance: ", x$variance, "\n")
cat("- mode    : ", x$mode, "\n")
cat("- skewness: ", x$skewness, "\n")
cat("- kurtosis: ", x$kurtosis, "\n")
invisible(x)
}
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
summary
print
plot
?summary
#' @param x an R object
#' @export
summary.binvar <- function(object,...){
obj <- list(
trials = object$trials,
prob = object$prob,
mean = aux_mean(object$trials,object$prob),
variance = aux_variance(object$trials,object$prob),
mode = aux_mode(object$trials,object$prob),
skewness = aux_skewness(object$trials,object$prob),
kurtosis = aux_kurtosis(object$trials,object$prob)
)
class(obj) <- "summary.binvar"
obj
}
devtools::check()
devtools::build_vignettes()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::test()
devtools::document()
devtools::check_man()
devtools::test()
devtools::build_vignettes()
devtools::build()
devtools::install()
devtools::check()
test_check("binomial")
library(testthat)
library(binomial)
test_check("binomial")
devtools::document()
devtools::document()
devtools::check_man()
devtools::test()
devtools::build_vignettes()
devtools::build()
devtools::install()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check_man()
devtools::test()
devtools::build_vignettes()
devtools::check()
